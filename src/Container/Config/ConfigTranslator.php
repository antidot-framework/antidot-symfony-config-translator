<?php

declare(strict_types=1);

namespace Antidot\SymfonyConfigTranslator\Container\Config;

use Antidot\SymfonyConfigTranslator\AliasTranslator;
use Antidot\SymfonyConfigTranslator\ConditionalTranslator;
use Antidot\SymfonyConfigTranslator\FactoryTranslator;
use Antidot\SymfonyConfigTranslator\InvokableTranslator;
use DateTimeImmutable;
use Zend\ConfigAggregator\ConfigAggregator;

use function array_merge_recursive;
use function date;
use function file_exists;
use function file_put_contents;
use function get_class;
use function json_decode;
use function json_encode;
use function sprintf;
use function str_replace;
use function var_export;

class ConfigTranslator
{
    const CACHE_TEMPLATE = <<< 'EOT'
<?php
/**
 * This configuration cache file was generated by %s
 * at %s
 */
return %s;

EOT;
    /** @var ConfigAggregator */
    private $configAggregator;

    public function __construct(ConfigAggregator $configAggregator)
    {
        $this->configAggregator = $configAggregator;
    }

    public function __invoke(bool $isCachedConfig, string $cachedConfigFile): array
    {
        if ($isCachedConfig) {
            $this->checkCacheConfig($cachedConfigFile);

            return include $cachedConfigFile;
        }

        return $this->getMergedConfig(
            $this->configAggregator->getMergedConfig(),
            $isCachedConfig,
            $cachedConfigFile
        );
    }

    private function checkCacheConfig(string $cachedConfigFile): void
    {
        // File exist y eso
        if (false === file_exists($cachedConfigFile)) {
            $this->cacheConfig(
                $this->getMergedConfig(
                    $this->configAggregator->getMergedConfig(),
                    true,
                    $cachedConfigFile
                ),
                $cachedConfigFile
            );
        }
    }

    private function parse(array $defaultConfig): array
    {
        return array_merge_recursive(
            (new FactoryTranslator())->process($defaultConfig),
            (new ConditionalTranslator())->process($defaultConfig),
            (new AliasTranslator())->process($defaultConfig['services']),
            (new InvokableTranslator())->process($defaultConfig['services']),
            $defaultConfig
        );
    }

    private function cacheConfig(array $config, string $cachedConfigFile): void
    {
        file_put_contents($cachedConfigFile, sprintf(
            self::CACHE_TEMPLATE,
            get_class($this),
            date('c'),
            var_export($config, true)
        ));
    }

    private function getMergedConfig(array $config, bool $isCachedConfig, string $cachedConfigFile): array
    {
        if (false === empty($config['parameters'])) {
            $config['parameters'] = json_decode(
                str_replace(
                    '%date%',
                    (new DateTimeImmutable())->format('Y-m-d'),
                    json_encode($config['parameters']) ?: ''
                ),
                true
            );
            $config = array_merge_recursive($config, $config['parameters'] ?? []);
            unset($config['parameters']);
        }

        if (false === empty($config['services'])) {
            $config = $this->parse($config);
            unset($config['services']);
        }

        if ($isCachedConfig) {
            $this->cacheConfig($config, $cachedConfigFile);
        }

        return $config;
    }
}
